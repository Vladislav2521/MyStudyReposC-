Animal sobakaSutulaya = new Animal("Гавкошмыг", 12);
Animal tuzik = new Animal("Тузик");
Animal bezdomniyPes = new Animal();
sobakaSutulaya.Print();
tuzik.Print();
bezdomniyPes.Print();
class Animal
{
    public string name;
    public int age;
    public Animal() : this("Неизвестно", 5) // первый конструктор
    { }
    public Animal(string name) : this(name, 10) // второй конструктор
    { }
    public Animal(string name, int age) // третий конструктор
    {
        this.name = name;
        this.age = age;
    }
    public void Print() => Console.WriteLine($"Имя: {name} Возраст: {age}");
}
// Все три конструктора выполняют однотипные действия - устанавливают значения полей 'name' и 'age'.
// Но этих повторяющихся действий могло бы быть больше.
// Мы можем не дублировать функциональность конструкторов, а просто обращаться из одного конструктора к другому,
// также через ключевое слово "this", передавая нужные значения для параметров.

// В данном случае первый конструктор вызывает второй, а второй конструктор вызывает третий.
// По количество и типу параметров компилятор узнаёт, какой именно конструктор вызывается.
// Например, во втором конструкторе идёт обращение к третьему конструктору, которуму передаются два значения.
// Причём в начале будет выполняться именно третий конструктор, и топлько потом код второго конструктора.
---------------------------------------------------------------------------------------

Animal sobakaSutulaya = new Animal();
sobakaSutulaya.name = "Гавкошмыг";
sobakaSutulaya.age = 12;

Animal tuzik = new Animal();
tuzik.name = "Тузик";
tuzik.age = 10;

Animal bezdomniyPes = new Animal();
bezdomniyPes.name = "Шарик";
bezdomniyPes.age = 8;

sobakaSutulaya.Print();
tuzik.Print();
bezdomniyPes.Print();
class Animal
{
    public string name;
    public int age;
    //public Animal(string name, int age) // третий конструктор
    //{
    //    this.name = name;
    //    this.age = age;
    //}
    public void Print() => Console.WriteLine($"Имя: {name} Возраст: {age}");
}
// Все три конструктора выполняют однотипные действия - устанавливают значения полей 'name' и 'age'.
// Но этих повторяющихся действий могло бы быть больше.
// Мы можем не дублировать функциональность конструкторов, а просто обращаться из одного конструктора к другому,
// также через ключевое слово "this", передавая нужные значения для параметров.

// В данном случае первый конструктор вызывает второй, а второй конструктор вызывает третий.
// По количество и типу параметров компилятор узнаёт, какой именно конструктор вызывается.
// Например, во втором конструкторе идёт обращение к третьему конструктору, которуму передаются два значения.
// Причём в начале будет выполняться именно третий конструктор, и топлько потом код второго конструктора.

// Объекты класса = экземпляры класса
